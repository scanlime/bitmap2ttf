Note from scanlime: I tried forking this and improving it a bit,
but I think the approach is possibly a dead-end. The resulting fonts
will self-intersect, and fixing this requires including some proper
polygon subtraction code.

---

Bitmap2ttf converts (monochrome) bitmap fonts into ttf fonts.

There are three parts:

outliner.py:
  - Traces each bitmap into a series of polygons.

convert.py:
  - makes the polygons into svg files, and writes a script for font forge
    to convert the svgs into a ttf font.

loader of your choice/implementation:
  - currently there is only one loader:

    pcftotty.py:
      - loader for PCF bitmap fonts. 
        usage: ./pcftottf.py font.pcf

    amigatottf.py
      - loader for amiga diskfonts (eg topaz)
        usage: ./amigatottf.py topaz/11
        Amiga diskfonts are multiple files in a directory. 
        The output will be named after the directory.

The program is structured to make it easy to implement a loader for a font 
format of your choice. All you need is to supply a dict object to convert.py
which contains contains the key=>value pairs: 

character unicode value => Image

